//
//  PostDetailsViewController.swift
//  Posts
//
//  Created by Santiago Pelaez Rua on 10/10/19.
//  Copyright (c) 2019 Santiago Pelaez Rua. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PostDetailsDisplayLogic: class {
    func displayPost(viewModel: PostDetails.GetPost.ViewModel)
    func displayUpdatePostsList(viewModel: PostDetails.UpdatePostsList.ViewModel)
    func displayToggleFavorite(viewModel: PostDetails.ToggleFavorite.ViewModel)
    func displayComments(viewModel: PostDetails.GetComments.ViewModel)
}

class PostDetailsViewController: UIViewController, PostDetailsDisplayLogic {
    var interactor: PostDetailsBusinessLogic?
    var router: (NSObjectProtocol & PostDetailsRoutingLogic & PostDetailsDataPassing)?
    var comments: [PostDetails.GetComments.ViewModel.DisplayedComment] = []

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = PostDetailsInteractor()
        let presenter = PostDetailsPresenter()
        let router = PostDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        configureBackButton()
        configureTableView()

        let request = PostDetails.GetPost.Request()
        interactor?.getPost(request: request)

        let commentsRequest = PostDetails.GetComments.Request()
        interactor?.getComments(request: commentsRequest)
    }

    // MARK: Outlets
    @IBOutlet weak var bodyTextView: UITextView!
    @IBOutlet weak var usernameLabel: UILabel!
    @IBOutlet weak var emailLabel: UILabel!
    @IBOutlet weak var phoneLabel: UILabel!
    @IBOutlet weak var websiteLabel: UILabel!
    @IBOutlet weak var commentsTableView: UITableView!
    @IBOutlet weak var favoriteButton: UIBarButtonItem!
    @IBOutlet weak var commentsHeaderView: UIView!
    
    // MARK: Display post
    func displayPost(viewModel: PostDetails.GetPost.ViewModel) {
        updateUI(displayedPost: viewModel.displayedPost, user: viewModel.user)
    }

    func displayToggleFavorite(viewModel: PostDetails.ToggleFavorite.ViewModel) {
        updateUI(displayedPost: viewModel.displayedPost, user: viewModel.user)
    }

    // MARK: Update Posts List
    func displayUpdatePostsList(viewModel: PostDetails.UpdatePostsList.ViewModel) {
        router?.routeToPostsList()
    }

    // MARK: Display comments
    func displayComments(viewModel: PostDetails.GetComments.ViewModel) {
        comments = viewModel.displayedComments
        commentsTableView.reloadData()
    }

    @objc func updatePostList(sender: UIBarButtonItem) {
        let request = PostDetails.UpdatePostsList.Request()

        interactor?.updatePostsList(request: request)
    }

    // MARK: Toggle Favorite
    @IBAction func toggleFavorite(_ sender: Any) {
        let request = PostDetails.ToggleFavorite.Request()

        interactor?.toggleFavorite(request: request)
    }

    private func configureBackButton() {
        navigationItem.hidesBackButton = true
        let customBackButton = UIBarButtonItem(image: UIImage(systemName: "chevron.left"), style: .done, target: self, action: #selector(updatePostList(sender:)))
        navigationItem.leftBarButtonItem = customBackButton
    }

    private func configureTableView() {
        commentsTableView.dataSource = self

    }

    private func updateUI(displayedPost: PostDetails.GetPost.ViewModel.DisplayedPost, user: User) {
        self.bodyTextView.text = displayedPost.body

        self.usernameLabel.text = user.name
        self.emailLabel.text = user.email
        self.phoneLabel.text = user.phone
        self.websiteLabel.text = user.website

        if displayedPost.isFavorite {
            self.favoriteButton.image = UIImage(systemName: "star.fill")
        } else {
            self.favoriteButton.image = UIImage(systemName: "star")
        }
    }
}

extension PostDetailsViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return comments.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "commentCell", for: indexPath)
        cell.textLabel?.text = comments[indexPath.row].body

        return cell
    }
}

extension PostDetailsViewController: UITableViewDelegate {
}
