//
//  PostsListInteractor.swift
//  Posts
//
//  Created by Santiago Pelaez Rua on 10/9/19.
//  Copyright (c) 2019 Santiago Pelaez Rua. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PostsListBusinessLogic {
    /**
     fetch posts given a request and asks presenter to format them
     */
    func fetch(request: PostsList.FetchPosts.Request)

    /**
     filter posts and ask presenter to format them
     - parameter request: Request object containint the type of filter to apply (all, favorites)
     */
    func filter(request: PostsList.FilterPosts.Request)

    /**
     delete all posts and ask presenter to show an empty list
     */
    func deleteAll(request: PostsList.DeletePosts.Request)

    /**
     deletes a post at the specified index given a request and asks presenter to format the new list
     - parameter request: a Request object containing the index of the post to be deleted
     */
    func delete(request: PostsList.DeletePosts.Request)
}

protocol PostsListDataStore {
    var posts: [Post] { get }
    func updatePost(post: Post)
}

class PostsListInteractor: PostsListBusinessLogic, PostsListDataStore {
    var presenter: PostsListPresentationLogic?
    var worker: PostsListWorker?
    var posts: [Post] = []
    var favoritePosts: [Post] = []
    private var currentFilter: PostsList.FilterPosts.Filter = .all

    init() {
        worker = PostsListWorker()
    }

    // MARK: Fetch
    func fetch(request: PostsList.FetchPosts.Request) {
        worker?.fetchPosts(completionHandler: { [weak self] posts in
            guard let self = self else { return }

            self.posts = posts

            let response = PostsList.FetchPosts.Response(posts: self.getPosts())
            self.presenter?.presentPosts(response: response)
        })
    }

    // MARK: Filter
    func filter(request: PostsList.FilterPosts.Request) {
        currentFilter = request.filter

        let response = PostsList.FilterPosts.Response(posts: getPosts())
        presenter?.presentFilteredPosts(response: response)
    }

    // MARK: Delete
    func delete(request: PostsList.DeletePosts.Request) {

        if let id = request.id {
            var postsToDelete = getPosts()
            let index = worker?.deletePost(id: id, on: &postsToDelete)

            let response = PostsList.DeletePosts.Response(index: index, posts: postsToDelete)
            presenter?.presentPosts(response: response)
        }
    }

    // MARK: Delete all posts
    func deleteAll(request: PostsList.DeletePosts.Request) {
        worker?.deleteAllPosts(posts: posts)
        self.posts = []
        presenter?.presentPosts(response: PostsList.DeletePosts.Response(posts: []))
    }

    // MARK: Update Post
    func updatePost(post: Post) {
        worker?.updatePost(post: post)

        if let indexOfPost = posts.firstIndex(where: { $0.id == post.id }) {
            posts[indexOfPost] = post
        }
    }

    // MARK: Helpers

    private func getPosts() -> [Post] {
        var postsForResponse = posts
        if currentFilter == .favorites {
            postsForResponse = worker?.filter(posts: postsForResponse, by: currentFilter) ?? []
            self.favoritePosts = postsForResponse
        }

        return postsForResponse
    }
}
