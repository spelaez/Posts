//
//  PostsListViewController.swift
//  Posts
//
//  Created by Santiago Pelaez Rua on 10/9/19.
//  Copyright (c) 2019 Santiago Pelaez Rua. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PostsListDisplayLogic: class {
    /**
     display posts on a table view
     - parameter viewModel: a ViewModel object containing an array of posts to display
     */
    func displayPosts(viewModel: PostsList.FetchPosts.ViewModel)
    func displayPosts(viewModel: PostsList.DeletePosts.ViewModel)
}

class PostsListViewController: UIViewController, PostsListDisplayLogic {
    var interactor: PostsListBusinessLogic?
    var router: (NSObjectProtocol & PostsListRoutingLogic & PostsListDataPassing)?

    var posts: [PostsList.Post] = []
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = PostsListInteractor()
        let presenter = PostsListPresenter()
        let router = PostsListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    @IBOutlet weak var postsTableView: UITableView!
    @IBOutlet weak var postsSegmentedControl: UISegmentedControl!

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        configureSegmentedControl()
        configureTableView()
        interactor?.fetch(request: PostsList.FetchPosts.Request())
    }

    // MARK: IBActions
    @IBAction func reloadPosts(_ sender: Any) {
        let request = PostsList.FetchPosts.Request()

        interactor?.fetch(request: request)
    }

    @IBAction func deleteAllPosts(_ sender: Any) {
        var allIndexPaths: [IndexPath] = []
        for i in 0..<posts.count {
            let indexPath = IndexPath(row: i, section: 0)
            allIndexPaths.append(indexPath)
        }

        let request = PostsList.DeletePosts.Request()
        interactor?.deleteAll(request: request)

        postsTableView.deleteRows(at: allIndexPaths, with: .top)
    }

    @IBAction func postsSegmentedControlDidChange(_ sender: UISegmentedControl) {
    }

    // MARK: Display posts
    func displayPosts(viewModel: PostsList.FetchPosts.ViewModel) {
        posts = viewModel.posts
        postsTableView.reloadSections(IndexSet(arrayLiteral: 0), with: .bottom)
    }

    func displayPosts(viewModel: PostsList.DeletePosts.ViewModel) {
        posts = viewModel.posts
    }

    // MARK: Private funcs
    private func configureSegmentedControl() {
        let textAttributesForNormalState = [NSAttributedString.Key.foregroundColor: UIColor.white]
        let textAttributesForSelectedState = [NSAttributedString.Key.foregroundColor: UIColor.postsGreen]

        postsSegmentedControl.setTitleTextAttributes(textAttributesForSelectedState, for: .selected)
        postsSegmentedControl.setTitleTextAttributes(textAttributesForNormalState, for: .normal)
    }

    private func configureTableView() {
        postsTableView.dataSource = self
        postsTableView.delegate = self

        postsTableView.tableFooterView = UIView()
    }

}

// MARK: UITableViewDataSource
extension PostsListViewController: UITableViewDataSource {

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return posts.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: "postCell") as? PostListCell {
            cell.post = posts[indexPath.row]

            return cell
        }

        assert(false, "cell should be of PostListCell type")
        return UITableViewCell()
    }
}

// MARK: UITableViewDelegate
extension PostsListViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        let action = UIContextualAction(style: .destructive, title: nil) { (action, view, completionHandler) in
            let request = PostsList.DeletePosts.Request(index: indexPath.row)

            self.interactor?.delete(request: request)
            tableView.deleteRows(at: [indexPath], with: .fade)
        }

        action.image = UIImage(systemName: "trash.fill")
        action.backgroundColor = UIColor.postsRed

        let configuration = UISwipeActionsConfiguration(actions: [action])

        return configuration
    }

}
