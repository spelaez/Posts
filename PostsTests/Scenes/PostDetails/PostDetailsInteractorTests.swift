//
//  PostDetailsInteractorTests.swift
//  Posts
//
//  Created by Santiago Pelaez Rua on 10/10/19.
//  Copyright (c) 2019 Santiago Pelaez Rua. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Posts
import XCTest

class PostDetailsInteractorTests: XCTestCase {
    // MARK: Subject under test
    var sut: PostDetailsInteractor!
    
    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        setupPostDetailsInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    func setupPostDetailsInteractor() {
        sut = PostDetailsInteractor()
    }
    
    // MARK: Test doubles
    class PostDetailsPresentationLogicSpy: PostDetailsPresentationLogic {
        var presentPostCalled = false
        var presentToggleFavoriteCalled = false
        var presentUpdatePostsListCalled = false
        var presentCommentsCalled = false

        func presentPost(response: PostDetails.GetPost.Response) {
            presentPostCalled = true
        }

        func presentToggleFavorite(response: PostDetails.ToggleFavorite.Response) {
            presentToggleFavoriteCalled = true
        }

        func presentUpdatePostsList(response: PostDetails.UpdatePostsList.Response) {
            presentUpdatePostsListCalled = true
        }

        func presentComments(response: PostDetails.GetComments.Response) {
            presentCommentsCalled = true
        }
    }

    class PostDetailsWorkerSpy: PostDetailsWorker {
        var fetchUserCalled = false
        var fetchCommentsCalled = false
        var toggleFavoriteCalled = false

        override func fetchUser(id: Int, completionHandler: @escaping ((User) -> ())) {
            fetchUserCalled = true

            let user = User(name: "", email: "", phone: "", website: "")
            completionHandler(user)
        }

        override func fetchComments(postId: Int, completionHandler: @escaping (([Comment]) -> ())) {
            fetchCommentsCalled = true

            let comment = Comment(id: 1, postId: 1, body: "")
            completionHandler([comment])
        }

        override func toggleFavoritePost(post: Post) {
            toggleFavoriteCalled = true
        }
    }
    
    // MARK: Tests
    func testInteractorShouldAskPresenterToPresentPost() {
        // Given
        let presentationLogicSpy = PostDetailsPresentationLogicSpy()
        sut.presenter = presentationLogicSpy

        let workerSpy = PostDetailsWorkerSpy()
        sut.worker = workerSpy

        let post = Post(userId: 1, id: 1, title: "", body: "")
        sut.post = post

        let request = PostDetails.GetPost.Request()

        // When
        sut.getPost(request: request)

        // Then
        XCTAssertTrue(presentationLogicSpy.presentPostCalled, "getPost() should call present post on presenter")
        XCTAssertTrue(workerSpy.fetchUserCalled, "getPost() should call worker to fetch user info")
    }

    func testInteractorShouldAskWorkerToFetchCommentsAndPresenterToFormatThem() {
        // Given
        let presentationLogicSpy = PostDetailsPresentationLogicSpy()
        sut.presenter = presentationLogicSpy

        let workerSpy = PostDetailsWorkerSpy()
        sut.worker = workerSpy

        let post = Post(userId: 1, id: 1, title: "", body: "")
        sut.post = post

        let request = PostDetails.GetComments.Request()

        // When
        sut.getComments(request: request)

        // Then
        XCTAssertTrue(workerSpy.fetchCommentsCalled, "getComments() should ask worker to fetch comments")
        XCTAssertTrue(presentationLogicSpy.presentCommentsCalled, "getComments() should call preset comments on presenter")
    }

    func testInteractorShouldAskWorkerToToggleFavoriteAndPresenterToPresentIt() {
        // Given
        let presentationLogicSpy = PostDetailsPresentationLogicSpy()
        sut.presenter = presentationLogicSpy

        let workerSpy = PostDetailsWorkerSpy()
        sut.worker = workerSpy

        let post = Post(userId: 1, id: 1, title: "", body: "")
        let user = User(name: "", email: "", phone: "", website: "")
        sut.post = post
        sut.user = user

        let request = PostDetails.ToggleFavorite.Request()

        // When
        sut.toggleFavorite(request: request)

        // Then
        XCTAssertTrue(workerSpy.toggleFavoriteCalled, "toggleFavorite() should ask worker to toggle favorite")
        XCTAssertTrue(presentationLogicSpy.presentToggleFavoriteCalled, "toggleFavorite() should call present toggle favorite on presenter")
    }

    func testInteractorShouldAskPresenterToPresentUpdatePostsList() {
        // Given
        let presentationLogicSpy = PostDetailsPresentationLogicSpy()
        sut.presenter = presentationLogicSpy

        let request = PostDetails.UpdatePostsList.Request()

        // When
        sut.updatePostsList(request: request)

        // Then
        XCTAssertTrue(presentationLogicSpy.presentUpdatePostsListCalled, "updatePostList() should call present update post list on presenter")
    }
}
