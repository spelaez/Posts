//
//  PostDetailsViewControllerTests.swift
//  Posts
//
//  Created by Santiago Pelaez Rua on 10/10/19.
//  Copyright (c) 2019 Santiago Pelaez Rua. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Posts
import XCTest

class PostDetailsViewControllerTests: XCTestCase {
    // MARK: Subject under test
    var sut: PostDetailsViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupPostDetailsViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    func setupPostDetailsViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "PostDetailsViewController") as? PostDetailsViewController
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    class PostDetailsBusinessLogicSpy: PostDetailsBusinessLogic {
        var getPostCalled = false
        var toggleFavoriteCalled = false
        var updatePostsListCalled = false

        func getPost(request: PostDetails.GetPost.Request) {
            getPostCalled = true
        }

        func toggleFavorite(request: PostDetails.ToggleFavorite.Request) {
            toggleFavoriteCalled = true
        }

        func updatePostsList(request: PostDetails.UpdatePostsList.Request) {
            updatePostsListCalled = true
        }
    }

    class PostDetailRoutingLogicSpy: NSObject, PostDetailsRoutingLogic, PostDetailsDataPassing {
        var dataStore: PostDetailsDataStore?
        var routeToPostsListCalled = false

        func routeToPostsList() {
            routeToPostsListCalled = true
        }
    }
    
    // MARK: Tests
    func testShouldGetPostWhenViewWillAppear() {
        // Given
        let spy = PostDetailsBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        sut.viewWillAppear(false)
        
        // Then
        XCTAssertTrue(spy.getPostCalled, "viewDidLoad() should ask the interactor to get post")
    }
    
    func testDisplayPost() {
        // Given
        let body = "post body"
        let displayable = PostDetails.GetPost.ViewModel.DisplayedPost(body: body, isFavorite: false)
        let user = User(name: "Jhon Doe", email: "jd@mail.com", phone: "123", website: "jd.com")

        let viewModel = PostDetails.GetPost.ViewModel(displayedPost: displayable, user: user)

        let spy = PostDetailsBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        sut.displayPost(viewModel: viewModel)
        
        // Then
        XCTAssertEqual(sut.bodyTextView.text, body, "displayPost(viewModel:) should update the body text view")
        XCTAssertEqual(sut.usernameLabel.text, user.name, "displayPost(viewModel:) should update the username label")
        XCTAssertEqual(sut.emailLabel.text, user.email, "displayPost(viewModel:) should update the email label")
        XCTAssertEqual(sut.phoneLabel.text, user.phone, "displayPost(viewModel:) should update the phone label")
        XCTAssertEqual(sut.websiteLabel.text, user.website, "displayPost(viewModel:) should update the website label")
    }

    func testDisplayUpdatePostsListShouldAskRouterToRouteToPostsList() {
        // Given
        let routingSpy = PostDetailRoutingLogicSpy()
        sut.router = routingSpy

        let viewModel = PostDetails.UpdatePostsList.ViewModel()

        // When
        sut.displayUpdatePostsList(viewModel: viewModel)

        // Then
        XCTAssertTrue(routingSpy.routeToPostsListCalled, "displayUpdatePostsList(viewModel:) should ask router to route to PostsList")
    }

    func testDisplayToggleFavorite() {
        // Given
        let body = "post body"
        let displayable = PostDetails.GetPost.ViewModel.DisplayedPost(body: body, isFavorite: true)
        let user = User(name: "Jhon Doe", email: "jd@mail.com", phone: "123", website: "jd.com")

        let viewModel = PostDetails.ToggleFavorite.ViewModel(displayedPost: displayable, user: user)

        let spy = PostDetailsBusinessLogicSpy()
        sut.interactor = spy

        // When
        loadView()
        sut.displayToggleFavorite(viewModel: viewModel)

        // Then
        XCTAssertEqual(sut.favoriteButton.image, UIImage(systemName: "star.fill"), "The favorites button should have a star.fill image")
    }

    func testControllerShouldAskInteractorToToggleFavorite() {
        // Given
        let spy = PostDetailsBusinessLogicSpy()
        sut.interactor = spy

        // When
        loadView()
        sut.toggleFavorite(self)

        // Then
        XCTAssertTrue(spy.toggleFavoriteCalled, "toggleFavorite(sender:) should call toggleFavorite on interactor")
    }

    func testControllerShouldAskInteratorToUpdatePostsList() {
        // Given
        let spy = PostDetailsBusinessLogicSpy()
        sut.interactor = spy

        // When
        loadView()
        sut.updatePostList(sender: UIBarButtonItem())

        // Then
        XCTAssertTrue(spy.updatePostsListCalled, "updatePostList(sender:) should call updatePostList on interactor")
    }
}
