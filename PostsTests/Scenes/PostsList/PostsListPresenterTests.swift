//
//  PostsListPresenterTests.swift
//  Posts
//
//  Created by Santiago Pelaez Rua on 10/9/19.
//  Copyright (c) 2019 Santiago Pelaez Rua. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Posts
import XCTest

class PostsListPresenterTests: XCTestCase {
    // MARK: Subject under test
    var sut: PostsListPresenter!
    
    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        setupPostsListPresenter()
    }

    // MARK: Test setup
    func setupPostsListPresenter() {
        sut = PostsListPresenter()
    }
    
    // MARK: Test doubles
    class PostsListDisplayLogicSpy: PostsListDisplayLogic {
        var displayPostsCalled = false

        var viewModelFetch: PostsList.FetchPosts.ViewModel!
        var viewModelDelete: PostsList.DeletePosts.ViewModel!

        func displayPosts(viewModel: PostsList.FetchPosts.ViewModel) {
            displayPostsCalled = true
            self.viewModelFetch = viewModel
        }

        func displayPosts(viewModel: PostsList.DeletePosts.ViewModel) {
            displayPostsCalled = true
            self.viewModelDelete = viewModel
        }

        func checkNumberOfUnreadPosts() -> Int {
            var count = 0

            for post in viewModelFetch.posts {
                count += post.isUnread ? 1 : 0
            }

            return count
        }
    }
    
    // MARK: Tests
    func testPresentPostsShouldMarkUnreadPostsAndAskViewControllerToDisplayPosts() {
        // Given
        let displayLogicSpy = PostsListDisplayLogicSpy()
        sut.viewController = displayLogicSpy

        var posts: [PostsList.Post] = []
        for i in 1...21 {
            let post = PostsList.Post(userId: i, id: i, title: "", body: "", isFavorite: false, isUnread: false)

            posts.append(post)
        }

        let response = PostsList.FetchPosts.Response(posts: posts)

        // When
        sut.presentPosts(response: response)

        // Then
        XCTAssertEqual(displayLogicSpy.checkNumberOfUnreadPosts(), 20, "Unread posts should be 20")
        XCTAssertFalse(displayLogicSpy.viewModelFetch.posts.last?.isUnread ?? true, "post 21 should be read")
        XCTAssertTrue(displayLogicSpy.displayPostsCalled, "presenter should ask viewController to display posts")
    }

    func testPresenterShouldAskViewControllerToDisplayPostsAfterDelete() {
        //Given
        let displayLogicSpy = PostsListDisplayLogicSpy()
        sut.viewController = displayLogicSpy

        let response = PostsList.DeletePosts.Response(posts: [])

        //When
        sut.presentPosts(response: response)

        //Then
        XCTAssertTrue(displayLogicSpy.displayPostsCalled, "presenter should ask view controller to display posts")
    }
}
