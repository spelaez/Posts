//
//  PostsListViewControllerTests.swift
//  Posts
//
//  Created by Santiago Pelaez Rua on 10/9/19.
//  Copyright (c) 2019 Santiago Pelaez Rua. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Posts
import XCTest

class PostsListViewControllerTests: XCTestCase {

    // MARK: Subject under test
    var sut: PostsListViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupPostsListViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    func setupPostsListViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = (storyboard.instantiateViewController(withIdentifier: "PostsListViewController") as! PostsListViewController)
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    class PostsListBusinessLogicSpy: PostsListBusinessLogic {
        // MARK: method call expectations
        var fetchCalled = false

        // MARK: Argument expectations
        var request: PostsList.FetchPosts.Request!
        var response: PostsList.FetchPosts.Response!
        var viewModel: PostsList.FetchPosts.ViewModel!

        // MARK: Spied methods
        func fetch(request: PostsList.FetchPosts.Request) {
            fetchCalled = true
        }
    }

    class PostsListRouterSpy: PostsListRoutingLogic {
        //TODO: complete when routing is done
    }
    
    // MARK: Tests
    func testShouldFetchWhenViewIsLoaded() {
        // Given
        let postsListBusinessLogicSpy = PostsListBusinessLogicSpy()

        sut.interactor = postsListBusinessLogicSpy

        // When
        loadView()

        // Then
        XCTAssertTrue(postsListBusinessLogicSpy.fetchCalled, "Fetch should be called when the view is loaded")
    }
    
    func testShouldConfigureSegmentedControllWhenViewIsLoaded() {
        // Given
        let expectedTextColorForNormalState = UIColor.white
        let expectedTextColorSelectedState = UIColor.postsGreen
        
        // When
        loadView()
        
        // Then
        let textColorForNormalState = sut.postsSegmentedControl.titleTextAttributes(for: .normal)?[NSAttributedString.Key.foregroundColor] as? UIColor
        let textColorForSelectedState = sut.postsSegmentedControl.titleTextAttributes(for: .selected)?[NSAttributedString.Key.foregroundColor] as? UIColor

        XCTAssertEqual(textColorForNormalState, expectedTextColorForNormalState, "text color for normal state should be white")
        XCTAssertEqual(textColorForSelectedState, expectedTextColorSelectedState, "text color for selected state should be postsGreen")
    }

    func testShouldConfigurePostsTableViewWhenViewIsLoaded() {
        // Given

        // When
        loadView()

        // Then
        XCTAssertNotNil(sut.postsTableView.dataSource, "Posts table view dataSource should be set")
        XCTAssertNotNil(sut.postsTableView.tableFooterView, "Posts table view tableFooterView should be set")
    }
    
    func testShouldDisplayPosts() {
        // Given
        let post = PostsList.Post(userId: "1",
                                  id: "1",
                                  title: "post title",
                                  body: "post body",
                                  isFavorite: false,
                                  isUnread: true)

        let viewModel = PostsList.FetchPosts.ViewModel(posts: [post])
        
        // When
        loadView()
        sut.displayPosts(viewModel: viewModel)
        
        // Then
        XCTAssertEqual(sut.postsTableView.numberOfRows(inSection: 0), viewModel.posts.count, "number of posts should match viewModel posts")

        let sutPost = sut.posts[0]

        XCTAssertEqual(sutPost.id, post.id, "posts have different ids")
        XCTAssertEqual(sutPost.userId, post.userId, "posts have different userIds")
        XCTAssertEqual(sutPost.title, post.title, "posts have different titles")
        XCTAssertEqual(sutPost.body, post.body, "posts have different bodies")
        XCTAssertEqual(sutPost.isFavorite, sutPost.isFavorite, "posts have different favorite value")
        XCTAssertEqual(sutPost.isUnread, sutPost.isUnread, "posts have different read status")
    }
}
